"""create service_booking tables

Revision ID: 066f16c0b546
Revises: 23de3046cae2
Create Date: 2025-07-09 22:38:47.772912

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '066f16c0b546'
down_revision: Union[str, None] = '23de3046cae2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('keyword_replies')
    op.drop_table('keyword_terms')
    op.drop_table('holiday_config')
    op.drop_table('keywords')
    op.drop_table('reply_materials')
    op.drop_table('working_hours')
    op.drop_table('routing_rules')
    op.drop_table('default_automation_rules')
    op.add_column('campaigns', sa.Column('type', postgresql.ENUM('text', 'image', 'document', 'template', 'interactive', name='campaign_type_enum'), nullable=False))
    op.alter_column('confirmed_bookings', 'appointment_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('confirmed_bookings', 'booking_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('confirmed_bookings', 'guest_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('confirmed_bookings', 'invoice_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               nullable=True)
    op.alter_column('confirmed_bookings', 'item_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('confirmed_bookings', 'therapist_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('confirmed_bookings', 'room_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('confirmed_bookings', 'invoice_item_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('confirmed_bookings', 'join_link',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.create_index(op.f('ix_confirmed_bookings_appointment_id'), 'confirmed_bookings', ['appointment_id'], unique=False)
    op.create_index(op.f('ix_confirmed_bookings_booking_id'), 'confirmed_bookings', ['booking_id'], unique=False)
    op.drop_column('confirmed_bookings', 'id')
    op.add_column('customers', sa.Column('user_id', sa.UUID(), nullable=True))
    op.create_foreign_key(None, 'customers', 'users', ['user_id'], ['id'])
    op.create_index(op.f('ix_reschedule_logs_id'), 'reschedule_logs', ['id'], unique=False)
    op.alter_column('reserved_slots', 'reservation_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('reserved_slots', 'booking_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('reserved_slots', 'response_snapshot',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.Text(),
               existing_nullable=True)
    op.create_index(op.f('ix_reserved_slots_reservation_id'), 'reserved_slots', ['reservation_id'], unique=False)
    op.alter_column('service_bookings', 'booking_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('service_bookings', 'guest_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('service_bookings', 'center_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('service_bookings', 'booking_date',
               existing_type=sa.DATE(),
               nullable=False)
    op.alter_column('service_bookings', 'service_item_id',
               existing_type=sa.UUID(),
               type_=sa.String(),
               existing_nullable=True)
    op.create_index(op.f('ix_service_bookings_booking_id'), 'service_bookings', ['booking_id'], unique=False)
    op.drop_column('service_bookings', 'id')
    op.drop_column('service_bookings', 'response_snapshot')
    op.create_unique_constraint(None, 'users', ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='unique')
    op.add_column('service_bookings', sa.Column('response_snapshot', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('service_bookings', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.drop_index(op.f('ix_service_bookings_booking_id'), table_name='service_bookings')
    op.alter_column('service_bookings', 'service_item_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('service_bookings', 'booking_date',
               existing_type=sa.DATE(),
               nullable=True)
    op.alter_column('service_bookings', 'center_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('service_bookings', 'guest_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('service_bookings', 'booking_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.drop_index(op.f('ix_reserved_slots_reservation_id'), table_name='reserved_slots')
    op.alter_column('reserved_slots', 'response_snapshot',
               existing_type=sa.Text(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('reserved_slots', 'booking_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('reserved_slots', 'reservation_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.drop_index(op.f('ix_reschedule_logs_id'), table_name='reschedule_logs')
    op.drop_constraint(None, 'customers', type_='foreignkey')
    op.drop_column('customers', 'user_id')
    op.add_column('confirmed_bookings', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.drop_index(op.f('ix_confirmed_bookings_booking_id'), table_name='confirmed_bookings')
    op.drop_index(op.f('ix_confirmed_bookings_appointment_id'), table_name='confirmed_bookings')
    op.alter_column('confirmed_bookings', 'join_link',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('confirmed_bookings', 'invoice_item_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('confirmed_bookings', 'room_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('confirmed_bookings', 'therapist_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('confirmed_bookings', 'item_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=True)
    op.alter_column('confirmed_bookings', 'invoice_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               nullable=False)
    op.alter_column('confirmed_bookings', 'guest_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               nullable=False)
    op.alter_column('confirmed_bookings', 'booking_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               nullable=False)
    op.alter_column('confirmed_bookings', 'appointment_id',
               existing_type=sa.String(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.drop_column('campaigns', 'type')
    op.create_table('default_automation_rules',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('rule_key', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('is_enabled', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('material_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('input_value', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['material_id'], ['reply_materials.id'], name=op.f('default_automation_rules_material_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('default_automation_rules_pkey')),
    sa.UniqueConstraint('rule_key', name=op.f('default_automation_rules_rule_key_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('routing_rules',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('user', 'team', name='routing_type_enum'), autoincrement=False, nullable=False),
    sa.Column('material_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('target_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['material_id'], ['reply_materials.id'], name=op.f('routing_rules_material_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('routing_rules_pkey'))
    )
    op.create_table('working_hours',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('day', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('open', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('intervals', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('working_hours_pkey'))
    )
    op.create_table('reply_materials',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('text', 'image', 'template', 'document', 'video', 'audio', name='reply_material_type_enum'), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('content', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('preview', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='reply_materials_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('keywords',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('matching_type', postgresql.ENUM('exact', 'fuzzy', 'contains', name='keyword_matching_enum'), autoincrement=False, nullable=False),
    sa.Column('trigger_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='keywords_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('holiday_config',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('holiday_mode', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('holiday_config_pkey'))
    )
    op.create_table('keyword_terms',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('keyword_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('value', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['keyword_id'], ['keywords.id'], name=op.f('keyword_terms_keyword_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('keyword_terms_pkey'))
    )
    op.create_table('keyword_replies',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('keyword_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('material_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['keyword_id'], ['keywords.id'], name=op.f('keyword_replies_keyword_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['material_id'], ['reply_materials.id'], name=op.f('keyword_replies_material_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('keyword_replies_pkey'))
    )
    # ### end Alembic commands ###
